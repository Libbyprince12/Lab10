---
title: "Lab 10: Distances and Projections"
subtitle: "Ecosystem Science and Sustainability"
author:
  - name: "Libby Prince"
    email: "princeev@colostate.edu"
output-dir: docs
type: website

format: 
  html: 
    self-contained: true
---

```{r}
# spatial data science
library(tidyverse)
library(sf)
library(units)

# Data
library(AOI)

# Visualization
library(gghighlight)
library(ggrepel)
library(knitr)
library(here)
```


Question 1


```{r}
#define a projection
eqdc <- '+proj=eqdc +lat_0=40 +lon_0=-96 +lat_1=20 +lat_2=60 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs'
```

```{r}
#1.2 - Get USA state boundaries
remotes::install_github("mikejohnson51/AOI", force = TRUE)
usa_states <- aoi_get(state = 'conus')
```

```{r}
#1.3 - Get country boundaries for Mexico, the United States of America, and Canada
countries <- aoi_get(country = c("MX", "CA", "USA"))
```

```{r}
# Load necessary libraries
library(readr)   # For read_csv()
library(sf)      # For spatial functions
library(here)    # For relative file paths

# Load the city data from the CSV file
cities_data <- read_csv(here("data", "uscities.csv"))

# Convert to spatial object using latitude and longitude columns
cities_sf <- st_as_sf(cities_data, coords = c("lng", "lat"), crs = 4326)

# Inspect the spatial object
head(cities_sf)
```

```{r}
# Transform cities_sf to the 'eqdc' projection
cities_sf_eqdc <- st_transform(cities_sf, crs = eqdc)

# Inspect the transformed data
head(cities_sf_eqdc)
```

```{r}
library(ggplot2)

# Plot the cities in the new projected coordinate system
ggplot() + 
  geom_sf(data = cities_sf_eqdc) + 
  coord_sf(datum = st_crs(cities_sf_eqdc)) + 
  theme_minimal()
```



2.1- distance to the usa national border


```{r}
# Load necessary libraries
library(sf)
library(tidyverse)
library(flextable)

# Assuming 'usa_states' is your object for US state boundaries:
# Transform USA states to the correct projection (eqdc)
usa_states_eqdc <- st_transform(usa_states, crs = eqdc)

# Combine geometries to create USA border geometry
usa_border <- st_union(usa_states_eqdc) 

# Ensure usa_border is in the same CRS as cities_sf_eqdc (eqdc)
usa_border <- st_transform(usa_border, st_crs(cities_sf_eqdc))

# Now calculate the distance to the USA national border
city_dist_to_usa_border <- st_distance(cities_sf_eqdc, usa_border)

# Remove the units class and convert to numeric (distance in km)
city_dist_to_usa_border_numeric <- as.numeric(city_dist_to_usa_border)

# Add the distances as a new column to the cities data
cities_sf_eqdc$dist_to_usa_border <- city_dist_to_usa_border_numeric

# Create a table of the five cities farthest from the USA border
farthest_cities_usa <- cities_sf_eqdc %>%
  st_as_sf() %>%
  arrange(desc(dist_to_usa_border)) %>%
  head(5) %>%
  select(city, state_name, dist_to_usa_border)

# Display the table using flextable
flextable::qflextable(farthest_cities_usa)

```


2.2- distance to states (km)


```{r}
# Load necessary libraries
library(sf)
library(tidyverse)
library(flextable)

# Transform USA states to the correct projection (eqdc)
usa_states_eqdc <- st_transform(usa_states, crs = eqdc)

# Combine geometries to create USA border geometry
usa_border <- st_union(usa_states_eqdc)  

# Transform the USA border to the CRS of cities (if needed)
usa_border_eqdc <- st_transform(usa_border, st_crs(cities_sf_eqdc))

# Combine geometries but preserve internal borders for state boundaries
state_borders <- usa_states_eqdc %>% 
  st_combine() %>%       
  st_cast("MULTILINESTRING")

# Calculate distance from each city to the nearest state border
cities_sf_eqdc$dist_to_state_border <- st_distance(cities_sf_eqdc, state_borders) %>% 
  units::set_units("km") %>% 
  as.numeric()

# Create a table of the 5 cities farthest from a state border
cities_sf_eqdc %>%
  st_drop_geometry() %>%
  select(city, state_name, dist_to_state_border) %>%
  arrange(desc(dist_to_state_border)) %>%
  slice(1:5) %>%
  flextable()
```



2.3- distance to mexico (km)


```{r}
# Filter out Mexico
mexico_eqdc <- countries %>%
  filter(admin == "Mexico") %>%
  st_transform(crs = eqdc) 

# Make Mexico a border line (not a polygon)
mexico_border <- mexico_eqdc %>%
  st_cast("MULTILINESTRING")

# Calculate distance from each city to Mexico
cities_sf_eqdc$dist_to_mexico <- st_distance(cities_sf_eqdc, mexico_border) %>%
  units::set_units("km") %>%
  as.numeric()

# Table of 5 cities farthest from Mexico
cities_sf_eqdc %>%
  st_drop_geometry() %>%
  select(city, state_name, dist_to_mexico) %>%
  arrange(desc(dist_to_mexico)) %>%
  slice(1:5) %>%
  flextable()
```



2.4- distance to canada (km)


```{r}
# Filter out Canada
canada_eqdc <- countries %>%
  filter(admin == "Canada") %>%
  st_transform(crs = eqdc)

# Make Canada a border line
canada_border <- canada_eqdc %>%
  st_cast("MULTILINESTRING")

# Calculate distance from each city to Canada
cities_sf_eqdc$dist_to_canada <- st_distance(cities_sf_eqdc, canada_border) %>%
  units::set_units("km") %>%
  as.numeric()

# Table of 5 cities farthest from Canada
cities_sf_eqdc %>%
  st_drop_geometry() %>%
  select(city, state_name, dist_to_canada) %>%
  arrange(desc(dist_to_canada)) %>%
  slice(1:5) %>%
  flextable()
```



3.1- data


```{r}
library(ggplot2)
library(ggrepel)
library(rnaturalearth)  # For world map data
library(sf)

# Get world map data for continents and countries
world <- ne_countries(scale = "medium", returnclass = "sf")

# Get the 10 largest cities by population
top10_cities <- cities_sf_eqdc %>%
  arrange(desc(population)) %>%
  slice(1:10)

# Transform the cities and USA states to a projected CRS (e.g., UTM for North America)
cities_sf_eqdc_proj <- st_transform(cities_sf_eqdc, crs = 5070)  # NAD83 / Conus Albers
usa_states_eqdc_proj <- st_transform(usa_states_eqdc, crs = 5070)

# Plotting the map
ggplot() +
  # Add world map as background (all continents)
  geom_sf(data = world, fill = "lightgray", color = "black", lwd = 0.2) +
  # Add USA state boundaries
  geom_sf(data = usa_states_eqdc_proj, fill = NA, color = "black", lwd = 0.5, lty = 1) +
  # Add CONUS outline (filtering out Hawaii and Alaska)
  geom_sf(data = usa_states_eqdc_proj %>% filter(state_name != "Hawaii" & state_name != "Alaska"),
          fill = NA, color = "black", lwd = 1, lty = 2) +
  # Plot the 10 largest cities
  geom_sf(data = cities_sf_eqdc_proj, aes(geometry = geometry), color = "red", size = 2) +
  # Label the cities (with adjusted parameters to reduce overlap)
  ggrepel::geom_label_repel(data = top10_cities, aes(label = city, geometry = geometry),
                            stat = "sf_coordinates", size = 3, color = "black", box.padding = 0.5, 
                            max.overlaps = 50) +  # Increase max.overlaps to reduce overlapping
  # Adjust the theme and labels
  theme_minimal() +
  labs(title = "Top 10 Largest USA Cities by Population",
       subtitle = "Including World Map, CONUS Outline, State Boundaries, and 10 Largest Cities") +
  coord_sf(xlim = c(-180, -60), ylim = c(-60, 90))  # Adjust coordinates to include more of the world map
```



3.2- city distance from the border


```{r}
top5_usa_border <- cities_sf_eqdc %>%
  arrange(desc(dist_to_usa_border)) %>%
  slice(1:5)

ggplot() +
  geom_sf(data = usa_states_eqdc, fill = NA, color = "gray60") +
  geom_sf(data = cities_sf_eqdc, aes(color = dist_to_usa_border), size = 0.6) +
  scale_color_viridis_c(name = "Distance to USA Border (km)", option = "C") +
  geom_sf(data = top5_usa_border, color = "red", size = 1.5) +
  ggrepel::geom_label_repel(data = top5_usa_border, 
                            aes(label = city, geometry = geometry),
                            stat = "sf_coordinates") +
  theme_minimal() +
  labs(title = "Cities by Distance from USA Border")
```



3.3- city distance from nearest state


```{r}
top5_state_border <- cities_sf_eqdc %>%
  arrange(desc(dist_to_state_border)) %>%
  slice(1:5)

ggplot() +
  geom_sf(data = usa_states_eqdc, fill = NA, color = "gray60") +
  geom_sf(data = cities_sf_eqdc, aes(color = dist_to_state_border), size = 0.6) +
  scale_color_viridis_c(name = "Distance to State Border (km)", option = "C") +
  geom_sf(data = top5_state_border, color = "blue", size = 1.5) +
  ggrepel::geom_label_repel(data = top5_state_border, 
                            aes(label = city, geometry = geometry),
                            stat = "sf_coordinates") +
  theme_minimal() +
  labs(title = "Cities by Distance from Nearest State Border")
```



3.4- equidistance boundary from Mexico and Canada


```{r}
# Create new variable
cities_sf_eqdc <- cities_sf_eqdc %>%
  mutate(diff_can_mex = abs(dist_to_mexico - dist_to_canada))

# Identify cities close to equidistant
equidistant_cities <- cities_sf_eqdc %>%
  filter(diff_can_mex < 100)

# Most populous 5 in this group
top5_eqpop <- equidistant_cities %>%
  arrange(desc(population)) %>%
  slice(1:5)

ggplot() +
  geom_sf(data = usa_states_eqdc, fill = NA, color = "gray70") +
  geom_sf(data = cities_sf_eqdc, aes(color = diff_can_mex), size = 0.5) +
  gghighlight::gghighlight(diff_can_mex < 100, use_direct_label = FALSE) +
  scale_color_viridis_c(name = "Abs(Mex - Can Dist) km") +
  geom_sf(data = top5_eqpop, color = "purple", size = 2) +
  ggrepel::geom_label_repel(data = top5_eqpop,
                            aes(label = city, geometry = geometry),
                            stat = "sf_coordinates") +
  theme_minimal() +
  labs(title = "Cities ~Equidistant from Mexico and Canada (Â±100km)")
```


4.1- Quantifing Border Zone


```{r}
# Define threshold in km
threshold_km <- 160

# Cities within the 100-mile border zone
border_zone_cities <- cities_sf_eqdc %>%
  filter(dist_to_usa_border <= threshold_km)

# Summary table
n_cities <- nrow(border_zone_cities)
pop_border_zone <- sum(border_zone_cities$population, na.rm = TRUE)
pop_total <- sum(cities_sf_eqdc$population, na.rm = TRUE)
pct_population <- round(100 * pop_border_zone / pop_total, 2)

# Comparison to ACLU claim (~2/3 of U.S. population lives in the zone)
aclu_claim <- 66.0
border_zone_summary <- tibble(
  `Cities in Border Zone` = n_cities,
  `Total Population in Zone` = pop_border_zone,
  `Total US City Population` = pop_total,
  `Percent in Zone (%)` = pct_population,
  `ACLU Estimate (%)` = aclu_claim
)
flextable::flextable(border_zone_summary)
```



4.2 Mapping Border Zone


```{r}
# Top 10 most populous in the danger zone
top10_borderzone <- border_zone_cities %>%
  arrange(desc(population)) %>%
  slice(1:10)

ggplot() +
  geom_sf(data = usa_states_eqdc, fill = NA, color = "gray70") +
  geom_sf(data = cities_sf_eqdc, color = "lightgray", size = 0.4) +
  geom_sf(data = border_zone_cities, aes(color = dist_to_usa_border), size = 0.6) +
  scale_color_gradient(low = "orange", high = "darkred", name = "Dist to Border (km)") +
  gghighlight::gghighlight(dist_to_usa_border <= 160, use_direct_label = FALSE) +
  geom_sf(data = top10_borderzone, size = 2, color = "black") +
  ggrepel::geom_label_repel(data = top10_borderzone, 
                            aes(label = city, geometry = geometry),
                            stat = "sf_coordinates") +
  theme_minimal() +
  labs(title = "US Cities Within 100 Miles (160 km) of National Border")
```



4.3 : Instead of labeling the 10 most populous cites, label the most populous city in each state within the Danger Zone.



```{r}
# Get top city per state within the border zone
top_city_per_state <- border_zone_cities %>%
  group_by(state_name) %>%
  slice_max(order_by = population, n = 1, with_ties = FALSE) %>%
  ungroup()

ggplot() +
  geom_sf(data = usa_states_eqdc, fill = NA, color = "gray70") +
  geom_sf(data = cities_sf_eqdc, color = "lightgray", size = 0.4) +
  geom_sf(data = border_zone_cities, aes(color = dist_to_usa_border), size = 0.6) +
  scale_color_gradient(low = "orange", high = "darkred", name = "Dist to Border (km)") +
  gghighlight::gghighlight(dist_to_usa_border <= 160, use_direct_label = FALSE) +
  geom_sf(data = top_city_per_state, size = 2, color = "blue") +
  ggrepel::geom_label_repel(data = top_city_per_state,
                            aes(label = city, geometry = geometry),
                            stat = "sf_coordinates",
                            max.overlaps = 100,  # Increase max overlaps
                            nudge_x = 0.1,       # Nudging to avoid overlap
                            nudge_y = 0.1) +     # Nudging to avoid overlap
  theme_minimal() +
  labs(title = "Most Populous City in Each State within 100 Mile Border Zone")
```

